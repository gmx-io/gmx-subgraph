enum OrderStatus {
  Created
  Executed
  Cancelled
  Frozen
}

enum TradeActionType {
  OrderCreated
  OrderCancelled
  OrderExecuted
  OrderFrozen
  OrderUpdated
}

enum ClaimCollateralActionType {
  ClaimPriceImpact
  ClaimFunding
}

type AffiliateRewardUpdate @entity(immutable: true) {
  id: ID!
  affiliate: String!
  marketAddress: String!
  tokenAddress: String!
  delta: BigInt!
  nextValue: BigInt!
  nextPoolValue: BigInt!
  transaction: Transaction!
}

type Order @entity {
  # orderKey
  id: ID!

  account: String!
  receiver: String!
  callbackContract: String!
  marketAddress: String!
  swapPath: [String!]
  initialCollateralTokenAddress: String!

  sizeDeltaUsd: BigInt!
  initialCollateralDeltaAmount: BigInt!
  triggerPrice: BigInt!
  acceptablePrice: BigInt!
  executionFee: BigInt!
  callbackGasLimit: BigInt!
  minOutputAmount: BigInt!

  updatedAtBlock: BigInt!

  orderType: BigInt!

  shouldUnwrapNativeToken: Boolean!
  isLong: Boolean!

  status: OrderStatus!

  cancelledReason: String
  cancelledReasonBytes: Bytes
  frozenReason: String
  frozenReasonBytes: Bytes

  createdTxn: Transaction!
  cancelledTxn: Transaction
  executedTxn: Transaction
}

type PositionIncrease @entity(immutable: true) {
  # orderKey
  id: ID!
  orderKey: String!
  positionKey: String!
  account: String!
  marketAddress: String!
  collateralTokenAddress: String!
  collateralTokenPriceMin: BigInt!
  collateralTokenPriceMax: BigInt!
  sizeInUsd: BigInt!
  sizeInTokens: BigInt!
  collateralAmount: BigInt!
  sizeDeltaUsd: BigInt!
  sizeDeltaInTokens: BigInt!
  collateralDeltaAmount: BigInt!
  executionPrice: BigInt!
  priceImpactDiffUsd: BigInt!
  orderType: BigInt!
  borrowingFactor: BigInt!
  longTokenFundingAmountPerSize: BigInt!
  shortTokenFundingAmountPerSize: BigInt!
  priceImpactAmount: BigInt!
  pnlUsd: BigInt!
  isLong: Boolean!

  transaction: Transaction
}

type PositionDecrease @entity(immutable: true) {
  # orderKey
  id: ID!
  orderKey: String!
  positionKey: String!
  account: String!
  marketAddress: String!
  collateralTokenAddress: String!
  collateralTokenPriceMin: BigInt!
  collateralTokenPriceMax: BigInt!
  sizeInUsd: BigInt!
  sizeInTokens: BigInt!
  collateralAmount: BigInt!
  sizeDeltaUsd: BigInt!
  sizeDeltaInTokens: BigInt!
  collateralDeltaAmount: BigInt!
  executionPrice: BigInt!
  priceImpactDiffUsd: BigInt!
  orderType: BigInt!
  borrowingFactor: BigInt!
  longTokenFundingAmountPerSize: BigInt!
  shortTokenFundingAmountPerSize: BigInt!
  priceImpactAmount: BigInt!
  pnlUsd: BigInt!
  isLong: Boolean!

  transaction: Transaction
}

type PositionFeesInfo @entity(immutable: true) {
  # orderKey:eventName
  id: ID!
  eventName: String!
  orderKey: String!
  marketAddress: String!
  collateralTokenAddress: String!

  trader: String!
  affiliate: String!

  collateralTokenPriceMin: BigInt!
  collateralTokenPriceMax: BigInt!

  positionFeeAmount: BigInt!
  borrowingFeeAmount: BigInt!
  fundingFeeAmount: BigInt!
  feeAmountForPool: BigInt!
  feeUsdForPool: BigInt!

  totalRebateFactor: BigInt!
  traderDiscountAmount: BigInt!
  totalRebateAmount: BigInt!
  affiliateRewardAmount: BigInt!

  transaction: Transaction!
}

type SwapInfo @entity(immutable: true) {
  # orderKey:marketAddress
  id: ID!
  orderKey: String!
  receiver: String!
  marketAddress: String!
  tokenInAddress: String!
  tokenOutAddress: String!
  tokenInPrice: BigInt!
  tokenOutPrice: BigInt!
  amountIn: BigInt!
  amountInAfterFees: BigInt!
  amountOut: BigInt!
  priceImpactUsd: BigInt!

  transaction: Transaction!
}

type SwapFeesInfo @entity(immutable: true) {
  # eventId
  id: ID!
  marketAddress: String!
  tokenAddress: String!

  swapFeeType: String!

  tokenPrice: BigInt!
  feeReceiverAmount: BigInt!
  feeAmountForPool: BigInt!
  feeUsdForPool: BigInt!

  transaction: Transaction!
}

type PoolValueRef @entity {
  # marketAddress
  id: ID!
  value: BigInt!
  pendingFeeUsds: [BigInt!]!
  pendingCollectedMarketFeesInfoIds: [String!]!
}

type DebugEvent @entity(immutable: true) {
  # key
  id: ID!
  account: String!
  message: String!
}

type WithdrawalCreatedEvent @entity(immutable: true) {
  # key
  id: ID!
  marketAddress: String!
  account: String!
  tokensAmount: BigInt!
}

type DepositCreatedEvent @entity(immutable: true) {
  # key
  id: ID!
  marketAddress: String!
  account: String!
}

type UserGmTokensRef @entity {
  #account:marketAddress
  id: ID!
  latestAction: UserGmTokensAction
}

type UserGmTokensAction @entity(immutable: true) {
  # account:marketAddress:transactionHash
  id: ID!
  account: String!
  marketAddress: String!
  tokensAmount: BigInt!
  isDeposit: Boolean
  tokensDiff: BigInt!
  feeUsdPerGmToken: BigInt!
  cummulativeIncome: BigInt!
  timestamp: Int!
  prevAction: UserGmTokensAction
}

type CollectedMarketFeesInfo @entity {
  # marketAddress:period:timestampGroup or marketAddress:total
  id: ID!
  period: String!
  marketAddress: String!
  feeAmountForPool: BigInt!
  feeUsdForPool: BigInt!
  feeUsdPerPoolValue: BigInt!
  feeUsdPerGmToken: BigInt!
  cummulativeFeeAmountForPool: BigInt!
  cummulativeFeeUsdForPool: BigInt!
  timestampGroup: Int!
}

type TradeAction @entity(immutable: true) {
  id: ID!
  eventName: String!

  orderKey: String!
  orderType: BigInt!

  account: String!
  marketAddress: String
  swapPath: [String!]
  initialCollateralTokenAddress: String!
  initialCollateralDeltaAmount: BigInt!

  # positions
  sizeDeltaUsd: BigInt
  triggerPrice: BigInt
  acceptablePrice: BigInt
  executionPrice: BigInt
  collateralTokenPriceMin: BigInt
  collateralTokenPriceMax: BigInt
  priceImpactDiffUsd: BigInt
  priceImpactAmount: BigInt
  positionFeeAmount: BigInt
  borrowingFeeAmount: BigInt
  fundingFeeAmount: BigInt
  pnlUsd: BigInt
  isLong: Boolean

  # swaps
  minOutputAmount: BigInt
  executionAmountOut: BigInt
  shouldUnwrapNativeToken: Boolean

  reason: String
  reasonBytes: Bytes

  transaction: Transaction!
}

type TokenPrice @entity {
  # tokenAddress
  id: ID!

  minPrice: BigInt!
  maxPrice: BigInt!
}

type ClaimCollateralAction @entity(immutable: true) {
  # transactionHash:account:eventName
  id: ID!
  eventName: ClaimCollateralActionType!
  account: String!
  marketAddresses: [String!]!
  tokenAddresses: [String!]!
  amounts: [BigInt!]!

  transaction: Transaction!
}

type PoolAmountUpdate @entity(immutable: true) {
  id: ID!
  marketAddress: String!
  tokenAddress: String!
  delta: BigInt!
  nextValue: BigInt!
  transaction: Transaction!
}

type Transaction @entity {
  id: ID!
  from: String!
  to: String!
  hash: String!
  timestamp: Int!
  blockNumber: Int!
  transactionIndex: Int!
}

type MarketInfo @entity {
  id: ID!
  marketToken: String!
  indexToken: String!
  longToken: String!
  shortToken: String!
}

type VolumeInfo @entity {
  id: ID!
  period: String!
  volumeUsd: BigInt!
  marginVolumeUsd: BigInt!
  swapVolumeUsd: BigInt!
  depositVolumeUsd: BigInt!
  withdrawalVolumeUsd: BigInt!
}

type SwapVolumeInfo @entity {
  # tokenIn:tokenOut:timestamp
  id: ID!
  period: String!
  tokenIn: String!
  tokenOut: String!
  timestamp: Int!
  volumeUsd: BigInt!
}

type PositionVolumeInfo @entity {
  # collateralToken:indexToken:timestamp
  id: ID!
  period: String!
  collateralToken: String!
  indexToken: String!
  timestamp: Int!
  volumeUsd: BigInt!
}

type User @entity {
  # account address
  id: ID!
  account: String!

  totalSwapCount: Int!
  totalPositionCount: Int!
  totalDepositCount: Int!
  totalWithdrawalCount: Int!
}

type UserStat @entity {
  # timestamp | total
  id: ID!
  totalSwapCount: Int!
  totalPositionCount: Int!
  totalDepositCount: Int!
  totalWithdrawalCount: Int!

  period: String!
  uniqueUsers: Int!
}

type SwapFeesInfoWithPeriod @entity {
  # timestamp | total
  id: ID!
  period: String!
  totalFeeReceiverAmount: BigInt!
  totalFeeAmountForPool: BigInt!

  totalFeeReceiverUsd: BigInt!
  totalFeeUsdForPool: BigInt!
}

type PositionFeesInfoWithPeriod @entity {
  # timestamp | total
  id: ID!
  period: String!
  totalPositionFeeAmountForPool: BigInt!
  totalPositionFeeUsdForPool: BigInt!

  totalPositionFeeAmount: BigInt!
  totalPositionFeeUsd: BigInt!
  totalBorrowingFeeUsd: BigInt!
}
